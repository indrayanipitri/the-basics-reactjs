node -v => liat versi node
npm -v => liat versi npm
npm install -g yarn => install yarn di global
yarn -v => liat versi yarn
yarn init -y => install package.json

install babel :
yarn add @babel/core @babel/cli @babel/preset-react

babel/core -> internal api nya
babel/cli -> buat ngecompile kode nya
preset/react -> ngasih tau kalau kode kita itu kode react

bikin proses compile nya dalam file package.json:
"scripts": {
  "build" : "babel src --out-dir public"
}

buat folder publik dan src.
pindahin index.html ke folder public.
buat file app.js dalam folder src.
kode js dalam index html cut, lalu paste dalam file app.js dalam folder src

utk ngasih tau preset yg kita pakai, buat config babel :
bikin file dgn nama .babelrc
masukan kode:
{
  "presets": ["@babel/preset-react"]
}


jalanin perintah build yg kita buat dlm scripts package.json utk menjalankan babel:
yarn build

file compile dalam folder src akan muncul dalam folder public, dgn nama file yang sama "app.js"

lalu import file app.js ke dalam file index.html

menjalankan file index.html menggunakan http server. install package lite-server:
yarn add lite-server

buka file package.json masukan kode berikut dalam scripts:
"start": "lite-server --baseDir public"

jalanin index.html :
yarn start

lite server tidak ada hubungannya dengan babel.
cara agar babel otomatis compile :
edit file package.json bagian scripts menjadi:
"build": "babel src --out-dir public -w",
"serve": "lite-server --baseDir public",
"start": "yarn build & yarn serve"

**catatan: karena yarn start, di tmpt aku servenya tdk jln(hanya buildnya saja). aku panggil package concurrently. npm i concurrently --save-dev
lalu start nya aku ganti jadi:
"start": "concurrently --kill-others \"yarn build\" \"yarn serve\"" 


react state => data yang ada didalam react compnent dan data itu terisolasi. jd gak bs dipake dicomponent lainnya, cuma bs dipake di component itu saja. data tersebut bisa diubah. jd ketika state nya diubah, componet trsbt akan merender ulang

component lifecycle -> memungkinkan kita bisa mengeksekusi sebuah function dimana waktu eksekusinya itu pada saat component itu dirender.

React.useEffect -> berguna untuk menjalankan function ketika component dirender. atau bahasa lainnya gini ngasih function yg dimana funtion tersebut dieksekusi pada saat component itu  dirender, maupun itu pertama kali atau pada saat ada perubahan state. selain itu kita juga bisa memantau satu state ketika state itu berubah, jadi kita bisa mantau satu state aja yg lain gak perlu dipantau tuh juga bisa.


//untuk mengeksekusi sekali pada saat dirender kita bisa pakai empty array, maka function akan dieksekusi pada saat pertama kali render aja. 

jadi untuk mengeksekusi function pada saat component itu dirender pertama kali aja, kita bisa kasih empty array

di react ada kelas component yang namanya did mount dan did update.
gunanya ya sama sih kek react.useEffect , reactEffect digunakan di functional,

pertamakali render component ke dalam dom tree di react ada namanya yaitu mount

kita bs kasih library carousel atau init library dalam function ese effect, knp didalam ? karena bisa ngedetect bahwa component itu dirender, jd kita mengeksekusi function ini. nah kalau naronya diluar use effect kita cm bs ngira2 udah dirender belum.

ketika kita init library, maka kita perlu return function nya dengan destroy

bedanya useRef dan useState: useRef nilai berubah tp gak di render. kalau useState nilai berubah maka dirender

... -> spread operator

production =
yarn build

jalanin di serve node =
npx serve -s build